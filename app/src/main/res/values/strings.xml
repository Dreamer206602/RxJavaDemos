<resources>
    <string name="app_name">RxJavaDemos</string>

    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="title_elementary">基本</string>
    <string name="title_map">转换(map)</string>
    <string name="title_zip">压合(zip)</string>
    <string name="title_token">Token(flatMap)</string>
    <string name="title_token_advanced">Token_高级(retryWhen)</string>
    <string name="title_cache">缓存(BehaviorSubject)</string>
    <string name="question_mark">\?</string>

    <!--ElementaryFragment-->
    <string name="dialog_elementary">RxJava 和 Retrofit 结合使用最基本的格式：用 subscribeOn() 和 observeOn() 来控制线程，并通过 subscribe() 来触发网络请求的开始。代码大致形式：\n\napi.getData()\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);</string>
    <string name="api_source_zhuangbi">* 本页 Sample 使用的 API 来自 <b>装逼大全</b> zhuangbi.info</string>


   <!--Toast-->
    <string name="loading_failed">数据加载失败</string>


    <!-- MapFragment-->
    <string name="previous_page">上一页</string>
    <string name="next_page">下一页</string>
    <string name="page_with_number">第%s页</string>
    <string name="dialog_map">有些服务端的接口设计，会在返回的数据外层包裹一些额外信息，
        这些信息对于调试很有用，但本地显示是用不到的。使用 map() 可以把外层的格式剥掉，
        只留下本地会用到的核心格式。代码大致形式：\n\napi.getData()\n&#160;&#160;&#160;&#160;<b>.map(response -> response.data)</b>\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);\n\n(详见本项目源码)\n\n当然，map() 也可以用于基于其他各种需求的格式转换。</string>
    <string name="api_source_gank">* 本页 Sample 使用的 API 来自 <b>干货集中营</b> gank.io</string>



    <!-- ZipFragment-->
    <string name="load">加载</string>
    <string name="api_source_zhuangbi_and_gank">* 本页 Sample 使用的 API 来自 <b>装逼大全</b> zhuangbi.info 和 <b>干货集中营</b> gank.io</string>
    <string name="dialog_zip">有的时候，app 中会需要同时访问不同接口，然后将结果糅合后转为统一的格式后输出（例如将第三方广告 API 的广告夹杂进自家平台返回的数据 List 中）。这种并行的异步处理比较麻烦，不过用了 zip() 之后就会简单得多。代码大致形式：\n\n<b>Observable.zip(api.getData(),\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;adApi.getAds(), zipFunc())</b>\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);\n\n(详见本项目源码)</string>


</resources>
